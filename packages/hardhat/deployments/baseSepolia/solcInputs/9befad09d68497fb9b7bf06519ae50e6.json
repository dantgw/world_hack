{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/helpers/ByteHasher.sol": {
      "content": "library ByteHasher {\n\t/// @dev Creates a keccak256 hash of a bytestring.\n\t/// @param value The bytestring to hash\n\t/// @return The hash of the specified value\n\t/// @dev `>> 8` makes sure that the result is included in our field\n\tfunction hashToField(bytes memory value) internal pure returns (uint256) {\n\t\treturn uint256(keccak256(abi.encodePacked(value))) >> 8;\n\t}\n}"
    },
    "contracts/interfaces/IWorldID.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWorldID {\n\t/// @notice Reverts if the zero-knowledge proof is invalid.\n\t/// @param root The of the Merkle tree\n\t/// @param groupId The id of the Semaphore group\n\t/// @param signalHash A keccak256 hash of the Semaphore signal\n\t/// @param nullifierHash The nullifier hash\n\t/// @param externalNullifierHash A keccak256 hash of the external nullifier\n\t/// @param proof The zero-knowledge proof\n\t/// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n\tfunction verifyProof(\n\t\tuint256 root,\n\t\tuint256 groupId,\n\t\tuint256 signalHash,\n\t\tuint256 nullifierHash,\n\t\tuint256 externalNullifierHash,\n\t\tuint256[8] calldata proof\n\t) external view;\n}"
    },
    "contracts/TokenLaunchpad.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/IWorldID.sol\";\nimport \"./helpers/ByteHasher.sol\";\n\ncontract TokenLaunchpad is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using ByteHasher for bytes;\n\n    // Constants\n    uint256 public constant VIRTUAL_ETH_RESERVES = 200_000 ether;\n    uint256 public constant VIRTUAL_TOKEN_RESERVES = 1_000_000_000 ether;\n    uint256 public constant FEE_RATE = 100; // 1% (100/10000)\n    uint256 public constant CREATOR_FEE_RATE = 100; // 1% (100/10000)\n    uint256 public constant PLATFORM_FEE_RATE = 100; // 1% (100/10000)\n    uint256 public constant INITIAL_MINT_LIMIT = 100_000_000_000_000_000_000; // 100 tokens per person per day\n    uint256 public constant SECONDS_IN_DAY = 86400; // 24 hours\n    \n    // State variables\n    mapping(address => TokenInfo) public tokens;\n    mapping(address => bool) public isToken;\n    address[] public allTokens;\n    \n    // Platform fees\n    uint256 public platformFees;\n    \n    // World ID variables\n    IWorldID internal immutable worldId;\n    uint256 internal immutable externalNullifierHash;\n    uint256 internal immutable tokenCreationNullifierHash;\n    uint256 internal immutable groupId = 1; // Orb-verified users only\n    \n    // Sybil resistance and daily limits\n    // mapping(uint256 => bool) internal nullifierHashes;\n    mapping(address => mapping (uint256 => uint256)) public initialTokenPurchasesMapping;\n    mapping(address => uint256) internal dailyMintedAmount;\n    mapping(address => uint256) internal lastMintDay;\n    \n    // Token creation cooldown tracking\n    mapping(uint256 => uint256) public lastTokenCreationTime;\n    \n    // Events\n    event TokenCreated(\n        address indexed token,\n        address indexed creator,\n        string name,\n        string symbol,\n        string metadataURI\n    );\n    \n    event TokensBought(\n        address indexed token,\n        address indexed buyer,\n        uint256 ethAmount,\n        uint256 tokenAmount,\n        uint256 newVirtualEthReserves,\n        uint256 newVirtualTokenReserves\n    );\n    \n    event TokensSold(\n        address indexed token,\n        address indexed seller,\n        uint256 tokenAmount,\n        uint256 ethAmount,\n        uint256 newVirtualEthReserves,\n        uint256 newVirtualTokenReserves\n    );\n    \n    \n    event CreatorFeesWithdrawn(\n        address indexed token,\n        address indexed creator,\n        uint256 amount\n    );\n    \n    event WorldIDVerified(\n        address indexed user,\n        uint256 nullifierHash\n    );\n    \n    event DailyLimitExceeded(\n        address indexed user,\n        uint256 attemptedAmount,\n        uint256 dailyLimit\n    );\n    \n    event TokenCreationCooldownExceeded(\n        address indexed user,\n        uint256 nullifierHash,\n        uint256 lastCreationTime,\n        uint256 cooldownEndTime\n    );\n    \n    // Structs\n    struct TokenInfo {\n        address creator;\n        string name;\n        string symbol;\n        string metadataURI;\n        uint256 virtualEthReserves;\n        uint256 virtualTokenReserves;\n        uint256 totalSupply;\n        uint256 creatorFees;\n        uint256 createdAt;\n    }\n    \n    /// @notice Thrown when attempting to reuse a nullifier\n    error InvalidMintAmount();\n    \n    /// @notice Thrown when daily mint limit is exceeded\n    error DailyLimitExceededError();\n    \n    /// @notice Thrown when token creation cooldown is not met\n    error TokenCreationCooldownNotMet();\n    \n    /// @param _worldId The address of the WorldIDRouter that will verify the proofs\n    /// @param _appId The World ID App ID (from Developer Portal)\n    /// @param _action The World ID Action (from Developer Portal)\n    /// @param _tokenCreationAction The World ID Action for token creation (from Developer Portal)\n    constructor(\n        IWorldID _worldId,\n        string memory _appId,\n        string memory _action,\n        string memory _tokenCreationAction\n    ) Ownable() {\n        worldId = _worldId;\n        externalNullifierHash = abi\n            .encodePacked(abi.encodePacked(_appId).hashToField(), _action)\n            .hashToField();\n        tokenCreationNullifierHash = abi\n            .encodePacked(abi.encodePacked(_appId).hashToField(), _tokenCreationAction)\n            .hashToField();\n    }\n    \n    /**\n     * @dev Create a new token with bonding curve\n     * @param name Token name\n     * @param symbol Token symbol\n     * @param metadataURI Token metadata URI\n     * @param root The World ID root to verify against\n     * @param nullifierHash The nullifier hash for this proof\n     * @param proof The zero-knowledge proof\n     */\n    function createToken(\n        string memory name,\n        string memory symbol,\n        string memory metadataURI,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) external nonReentrant returns (address) {\n        // Check 24-hour cooldown\n        _checkTokenCreationCooldown(nullifierHash);\n        \n        // Verify World ID proof for token creation\n        _verifyTokenCreationProof(msg.sender, root, nullifierHash, proof);\n        \n        // Update last creation time\n        lastTokenCreationTime[nullifierHash] = block.timestamp;\n        \n        // Deploy new ERC20 token\n        LaunchpadToken token = new LaunchpadToken(name, symbol, msg.sender);\n        address tokenAddress = address(token);\n        \n        // Initialize token info\n        tokens[tokenAddress] = TokenInfo({\n            creator: msg.sender,\n            name: name,\n            symbol: symbol,\n            metadataURI: metadataURI,\n            virtualEthReserves: VIRTUAL_ETH_RESERVES,\n            virtualTokenReserves: VIRTUAL_TOKEN_RESERVES,\n            totalSupply: 0,\n            creatorFees: 0,\n            createdAt: block.timestamp\n        });\n        \n        isToken[tokenAddress] = true;\n        allTokens.push(tokenAddress);\n        \n        emit TokenCreated(tokenAddress, msg.sender, name, symbol, metadataURI);\n        \n        return tokenAddress;\n    }\n    \n    /**\n     * @dev Buy tokens using ETH with World ID verification\n     * @param tokenAddress Address of the token to buy\n     * @param root The World ID root to verify against\n     * @param nullifierHash The nullifier hash for this proof\n     * @param proof The zero-knowledge proof\n     */\n    function buyTokens(\n        address tokenAddress,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) external payable nonReentrant {\n        require(isToken[tokenAddress], \"Token does not exist\");\n        require(msg.value > 0, \"Must send ETH\");\n        \n        // Verify World ID proof\n        _verifyWorldIDProof(msg.sender, root, nullifierHash, proof);\n        \n        TokenInfo storage tokenInfo = tokens[tokenAddress];\n        \n        uint256 ethAmount = msg.value;\n        uint256 feeAmount = ethAmount.mul(FEE_RATE).div(10000);\n        uint256 ethAfterFee = ethAmount.sub(feeAmount);\n        \n        // Calculate token amount using bonding curve\n        uint256 tokenAmount = calculateTokenAmount(\n            tokenInfo.virtualEthReserves,\n            tokenInfo.virtualTokenReserves,\n            ethAfterFee\n        );\n        \n        // Check initial mint limit\n        if (block.timestamp - tokenInfo.createdAt < SECONDS_IN_DAY){\n            _checkInitialMintLimit(nullifierHash, tokenAddress, tokenAmount);\n            initialTokenPurchasesMapping[tokenAddress][nullifierHash] += tokenAmount;\n        }\n        \n        // Update virtual reserves\n        tokenInfo.virtualEthReserves = tokenInfo.virtualEthReserves.add(ethAfterFee);\n        tokenInfo.virtualTokenReserves = tokenInfo.virtualTokenReserves.sub(tokenAmount);\n        tokenInfo.totalSupply = tokenInfo.totalSupply.add(tokenAmount);\n        \n        // Mint tokens to buyer\n        LaunchpadToken(tokenAddress).mint(msg.sender, tokenAmount);\n        \n        // Distribute fees\n        uint256 creatorFee = feeAmount.mul(CREATOR_FEE_RATE).div(10000);\n        uint256 platformFee = feeAmount.sub(creatorFee);\n        \n        tokenInfo.creatorFees = tokenInfo.creatorFees.add(creatorFee);\n        platformFees = platformFees.add(platformFee);\n        \n        emit TokensBought(\n            tokenAddress,\n            msg.sender,\n            ethAmount,\n            tokenAmount,\n            tokenInfo.virtualEthReserves,\n            tokenInfo.virtualTokenReserves\n        );\n    }\n    \n    /**\n     * @dev Buy specific amount of tokens with World ID verification\n     * @param tokenAddress Address of the token to buy\n     * @param tokenAmount Amount of tokens to buy\n     * @param root The World ID root to verify against\n     * @param nullifierHash The nullifier hash for this proof\n     * @param proof The zero-knowledge proof\n     */\n    function buyTokensExact(\n        address tokenAddress,\n        uint256 tokenAmount,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) external payable nonReentrant {\n        require(isToken[tokenAddress], \"Token does not exist\");\n        require(tokenAmount > 0, \"Must buy tokens\");\n        \n        // Verify World ID proof\n        _verifyWorldIDProof(msg.sender, root, nullifierHash, proof);\n        \n        TokenInfo storage tokenInfo = tokens[tokenAddress];\n        \n        // Check initial mint limit\n        if (block.timestamp - tokenInfo.createdAt < SECONDS_IN_DAY){\n            _checkInitialMintLimit(nullifierHash, tokenAddress, tokenAmount);\n            initialTokenPurchasesMapping[tokenAddress][nullifierHash] += tokenAmount;\n        }\n\n        // Calculate required ETH amount using bonding curve\n        uint256 requiredEthAmount = calculateEthAmount(\n            tokenInfo.virtualEthReserves,\n            tokenInfo.virtualTokenReserves,\n            tokenAmount\n        );\n        \n        // Add fees to required ETH amount\n        uint256 totalRequiredEth = requiredEthAmount.mul(10000).div(10000 - FEE_RATE);\n        \n        require(msg.value >= totalRequiredEth, \"Insufficient ETH sent\");\n        \n        // Calculate actual fees\n        uint256 feeAmount = totalRequiredEth.mul(FEE_RATE).div(10000);\n        uint256 ethAfterFee = totalRequiredEth.sub(feeAmount);\n        \n        // Update virtual reserves\n        tokenInfo.virtualEthReserves = tokenInfo.virtualEthReserves.add(ethAfterFee);\n        tokenInfo.virtualTokenReserves = tokenInfo.virtualTokenReserves.sub(tokenAmount);\n        tokenInfo.totalSupply = tokenInfo.totalSupply.add(tokenAmount);\n        \n        // Mint tokens to buyer\n        LaunchpadToken(tokenAddress).mint(msg.sender, tokenAmount);\n        \n        // Distribute fees\n        uint256 creatorFee = feeAmount.mul(CREATOR_FEE_RATE).div(10000);\n        uint256 platformFee = feeAmount.sub(creatorFee);\n        \n        tokenInfo.creatorFees = tokenInfo.creatorFees.add(creatorFee);\n        platformFees = platformFees.add(platformFee);\n        \n        // Refund excess ETH\n        if (msg.value > totalRequiredEth) {\n            uint256 refund = msg.value.sub(totalRequiredEth);\n            (bool success, ) = msg.sender.call{value: refund}(\"\");\n            require(success, \"ETH refund failed\");\n        }\n        \n        emit TokensBought(\n            tokenAddress,\n            msg.sender,\n            totalRequiredEth,\n            tokenAmount,\n            tokenInfo.virtualEthReserves,\n            tokenInfo.virtualTokenReserves\n        );\n    }\n    \n    /**\n     * @dev Sell tokens for ETH\n     * @param tokenAddress Address of the token to sell\n     * @param tokenAmount Amount of tokens to sell\n     */\n    function sellTokens(address tokenAddress, uint256 tokenAmount) external nonReentrant {\n        require(isToken[tokenAddress], \"Token does not exist\");\n        require(tokenAmount > 0, \"Must sell tokens\");\n        \n        TokenInfo storage tokenInfo = tokens[tokenAddress];\n        \n        // Check user balance\n        require(\n            LaunchpadToken(tokenAddress).balanceOf(msg.sender) >= tokenAmount,\n            \"Insufficient token balance\"\n        );\n        \n        // Calculate ETH amount using bonding curve\n        uint256 ethAmount = calculateEthAmount(\n            tokenInfo.virtualEthReserves,\n            tokenInfo.virtualTokenReserves,\n            tokenAmount\n        );\n        \n        uint256 feeAmount = ethAmount.mul(FEE_RATE).div(10000);\n        uint256 ethAfterFee = ethAmount.sub(feeAmount);\n        \n        // Update virtual reserves\n        tokenInfo.virtualEthReserves = tokenInfo.virtualEthReserves.sub(ethAmount);\n        tokenInfo.virtualTokenReserves = tokenInfo.virtualTokenReserves.add(tokenAmount);\n        tokenInfo.totalSupply = tokenInfo.totalSupply.sub(tokenAmount);\n        \n        // Burn tokens from seller\n        LaunchpadToken(tokenAddress).burn(msg.sender, tokenAmount);\n        \n        // Distribute fees\n        uint256 creatorFee = feeAmount.mul(CREATOR_FEE_RATE).div(10000);\n        uint256 platformFee = feeAmount.sub(creatorFee);\n        \n        tokenInfo.creatorFees = tokenInfo.creatorFees.add(creatorFee);\n        platformFees = platformFees.add(platformFee);\n        \n        // Send ETH to seller\n        (bool success, ) = msg.sender.call{value: ethAfterFee}(\"\");\n        require(success, \"ETH transfer failed\");\n        \n        emit TokensSold(\n            tokenAddress,\n            msg.sender,\n            tokenAmount,\n            ethAmount,\n            tokenInfo.virtualEthReserves,\n            tokenInfo.virtualTokenReserves\n        );\n    }\n    \n    /**\n     * @dev Withdraw creator fees\n     * @param tokenAddress Address of the token\n     */\n    function withdrawCreatorFees(address tokenAddress) external nonReentrant {\n        require(isToken[tokenAddress], \"Token does not exist\");\n        \n        TokenInfo storage tokenInfo = tokens[tokenAddress];\n        require(msg.sender == tokenInfo.creator, \"Only creator can withdraw\");\n        require(tokenInfo.creatorFees > 0, \"No fees to withdraw\");\n        \n        uint256 amount = tokenInfo.creatorFees;\n        tokenInfo.creatorFees = 0;\n        \n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"ETH transfer failed\");\n        \n        emit CreatorFeesWithdrawn(tokenAddress, msg.sender, amount);\n    }\n    \n    /**\n     * @dev Withdraw platform fees (owner only)\n     */\n    function withdrawPlatformFees() external onlyOwner nonReentrant {\n        require(platformFees > 0, \"No platform fees to withdraw\");\n        \n        uint256 amount = platformFees;\n        platformFees = 0;\n        \n        (bool success, ) = owner().call{value: amount}(\"\");\n        require(success, \"ETH transfer failed\");\n    }\n    \n    /**\n     * @dev Calculate token amount for given ETH using bonding curve\n     */\n    function calculateTokenAmount(\n        uint256 virtualEthReserves,\n        uint256 virtualTokenReserves,\n        uint256 ethAmount\n    ) public pure returns (uint256) {\n        uint256 newVirtualEthReserves = virtualEthReserves.add(ethAmount);\n        uint256 newVirtualTokenReserves = virtualEthReserves.mul(virtualTokenReserves).div(newVirtualEthReserves);\n        return virtualTokenReserves.sub(newVirtualTokenReserves);\n    }\n    \n    /**\n     * @dev Calculate ETH amount for given tokens using bonding curve\n     */\n    function calculateEthAmount(\n        uint256 virtualEthReserves,\n        uint256 virtualTokenReserves,\n        uint256 tokenAmount\n    ) public pure returns (uint256) {\n        uint256 newVirtualTokenReserves = virtualTokenReserves.add(tokenAmount);\n        uint256 newVirtualEthReserves = virtualEthReserves.mul(virtualTokenReserves).div(newVirtualTokenReserves);\n        return virtualEthReserves.sub(newVirtualEthReserves);\n    }\n    \n    /**\n     * @dev Get token price in ETH\n     */\n    function getTokenPrice(address tokenAddress) external view returns (uint256) {\n        require(isToken[tokenAddress], \"Token does not exist\");\n        \n        TokenInfo memory tokenInfo = tokens[tokenAddress];\n        return tokenInfo.virtualEthReserves.mul(1e18).div(tokenInfo.virtualTokenReserves);\n    }\n    \n    /**\n     * @dev Get ETH amount required to buy specific number of tokens (including fees)\n     * @param tokenAddress Address of the token\n     * @param tokenAmount Amount of tokens to buy\n     * @return ethAmount ETH amount required (including fees)\n     */\n    function getEthRequiredForTokens(address tokenAddress, uint256 tokenAmount) external view returns (uint256) {\n        require(isToken[tokenAddress], \"Token does not exist\");\n        require(tokenAmount > 0, \"Token amount must be greater than 0\");\n        \n        TokenInfo memory tokenInfo = tokens[tokenAddress];\n        \n        // Calculate required ETH amount using bonding curve\n        uint256 requiredEthAmount = calculateEthAmount(\n            tokenInfo.virtualEthReserves,\n            tokenInfo.virtualTokenReserves,\n            tokenAmount\n        );\n        \n        // Add fees to required ETH amount\n        return requiredEthAmount.mul(10000).div(10000 - FEE_RATE);\n    }\n    \n    /**\n     * @dev Get all tokens\n     */\n    function getAllTokens() external view returns (address[] memory) {\n        return allTokens;\n    }\n    \n    /**\n     * @dev Get token count\n     */\n    function getTokenCount() external view returns (uint256) {\n        return allTokens.length;\n    }\n    \n    /**\n     * @dev Get user's remaining mint limit\n     */\n    function getRemainingLimit(uint256 nullifierHash, address tokenAddress) external view returns (uint256) {\n        return INITIAL_MINT_LIMIT - initialTokenPurchasesMapping[tokenAddress][nullifierHash];\n    }\n    \n    /**\n     * @dev Get when a user can create their next token\n     * @param nullifierHash The nullifier hash to check\n     * @return canCreateNow True if user can create a token now\n     * @return nextCreationTime Timestamp when user can create next token (0 if can create now)\n     */\n    function getTokenCreationCooldown(uint256 nullifierHash) external view returns (bool canCreateNow, uint256 nextCreationTime) {\n        uint256 lastCreation = lastTokenCreationTime[nullifierHash];\n        if (lastCreation == 0) {\n            return (true, 0);\n        }\n        \n        uint256 cooldownEndTime = lastCreation + SECONDS_IN_DAY;\n        if (block.timestamp >= cooldownEndTime) {\n            return (true, 0);\n        } else {\n            return (false, cooldownEndTime);\n        }\n    }\n    \n    /**\n     * @dev Internal function to verify purchase limit within the first 24h\n     */\n    function _verifyWorldIDProof(\n        address signal,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) internal {\n       \n        \n        // Verify the World ID proof\n        worldId.verifyProof(\n            root,\n            groupId,\n            abi.encodePacked(signal).hashToField(),\n            nullifierHash,\n            externalNullifierHash,\n            proof\n        );\n        \n        emit WorldIDVerified(signal, nullifierHash);\n    }\n    \n    /**\n     * @dev Internal function to check daily mint limit\n     */\n    function _checkInitialMintLimit(uint256 nullifierHash, address tokenAddress,uint256 tokenAmount) internal view {\n        if (initialTokenPurchasesMapping[tokenAddress][nullifierHash] + tokenAmount > INITIAL_MINT_LIMIT) revert InvalidMintAmount();\n    }\n    \n    /**\n     * @dev Internal function to check token creation cooldown\n     */\n    function _checkTokenCreationCooldown(uint256 nullifierHash) internal {\n        uint256 lastCreation = lastTokenCreationTime[nullifierHash];\n        if (lastCreation > 0 && block.timestamp - lastCreation < SECONDS_IN_DAY) {\n            uint256 cooldownEndTime = lastCreation + SECONDS_IN_DAY;\n            emit TokenCreationCooldownExceeded(msg.sender, nullifierHash, lastCreation, cooldownEndTime);\n            revert TokenCreationCooldownNotMet();\n        }\n    }\n    \n    /**\n     * @dev Internal function to verify token creation World ID proof\n     */\n    function _verifyTokenCreationProof(\n        address signal,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) internal {\n        // Verify the World ID proof for token creation\n        worldId.verifyProof(\n            root,\n            groupId,\n            abi.encodePacked(signal).hashToField(),\n            nullifierHash,\n            tokenCreationNullifierHash,\n            proof\n        );\n        \n        emit WorldIDVerified(signal, nullifierHash);\n    }\n    \n    \n    /**\n     * @dev Receive ETH\n     */\n    receive() external payable {}\n}\n\n/**\n * @title LaunchpadToken\n * @dev ERC20 token for the launchpad\n */\ncontract LaunchpadToken is ERC20, Ownable {\n    address public immutable launchpad;\n    \n    constructor(\n        string memory name,\n        string memory symbol,\n        address creator\n    ) ERC20(name, symbol) Ownable() {\n        launchpad = msg.sender;\n        _transferOwnership(creator);\n    }\n    \n    /**\n     * @dev Mint tokens (only launchpad can call)\n     */\n    function mint(address to, uint256 amount) external {\n        require(msg.sender == launchpad, \"Only launchpad can mint\");\n        _mint(to, amount);\n    }\n    \n    /**\n     * @dev Burn tokens (only launchpad can call)\n     */\n    function burn(address from, uint256 amount) external {\n        require(msg.sender == launchpad, \"Only launchpad can burn\");\n        _burn(from, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}